<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles/home.css">
    <link rel="stylesheet" href="styles/admin.css">
    <title>iWrite - Home</title>
</head>

<body>
    <header>
        <div class="logo-container">
            <img src="images/iwrite-svg.svg" alt="iWrite Logo" class="logo">
            <span class="app-name">iWrite</span>
        </div>
        <nav class="nav-buttons">
            <% if(userAuthorized) {%>
                <!-- add href with user-info also a secure route -->
                <a id="user-account-btn" href="#" class="nav-button">Welcome <%= userData.username %> </a>
                <a id="user-profile-btn" href="/profile/<%= userData.userId %>" method="post" class="nav-button">Profile</a>
                <a id="user-logout-btn" href="/logout" method="post" class="nav-button">Logout</a>
            <% }else{ %>
                <a id="user-account-btn" href="/login" class="nav-button">Login to Your Account</a>
            <% } %>
            <a id="create-post-btn" href="/createBlog" class="nav-button">Write A Blog</a>

        </nav>
    </header>

    <!-- if user is admin -->
    <% if(isAdmin) {%>
        
        <div id="admin-icon" class="user-icon">
            <span class="tooltiptext">You are viewing this as admin</span><br>
            <img src="images/admin-icon.svg" style="height: 40px;margin-left: 8px;" alt="User Icon">
        </div>
        <!-- admin level user -->
    <% } else{ %>
        <!-- non admin user  -->
    <% } %>

    <main>
        <div id="blogs-parent-div" class="all-blogs-container">
            <!-- Skeleton Loading -->
            <div class="skeleton-loader">
                <%for (var i=0;i<10;i++){ %>
                    <div class="skeleton-post" style="background-color: #ffdddd;"> <!-- Light Red -->
                        <h2 class="skeleton-title"></h2>
                        <p class="skeleton-author"></p>
                        <hr>
                        <p class="skeleton-content"></p>
                    </div>
                    <div class="skeleton-post" style="background-color: #ddddff;"> <!-- Light Blue -->
                        <h2 class="skeleton-title"></h2>
                        <p class="skeleton-author"></p>
                        <hr>
                        <p class="skeleton-content"></p>
                    </div>
                    <div class="skeleton-post" style="background-color: #ddffdd;"> <!-- Light Green -->
                        <h2 class="skeleton-title"></h2>
                        <p class="skeleton-author"></p>
                        <hr>
                        <p class="skeleton-content"></p>
                    </div>
                    <div class="skeleton-post" style="background-color: #ffffdd;"> <!-- Light Yellow -->
                        <h2 class="skeleton-title"></h2>
                        <p class="skeleton-author"></p>
                        <hr>
                        <p class="skeleton-content"></p>
                    </div>
                    <div class="skeleton-post" style="background-color: #ffdd99;"> <!-- Light Orange -->
                        <h2 class="skeleton-title"></h2>
                        <p class="skeleton-author"></p>
                        <hr>
                        <p class="skeleton-content"></p>
                    </div>
                    <div class="skeleton-post" style="background-color: #f5f5dc;"> <!-- Light Beige -->
                        <h2 class="skeleton-title"></h2>
                        <p class="skeleton-author"></p>
                        <hr>
                        <p class="skeleton-content"></p>
                    </div>
                    <% } %>
            </div>
        </div>
    </main>
</body>


<script id="content-loader">
    var blogsList;
    var isDataFetched = false;
    function triggerBlogsDataFetched() {
        const event = new CustomEvent('blog-data-available');
        document.dispatchEvent(event);
    }


    // Event listener for the custom event 'blog-data-available'
    document.addEventListener('blog-data-available', () => {
        // Call renderBlogDiv after a setTimeout of 1 second
        setTimeout(() => {
            renderBlogDiv();
        }, 1000);
    });


    async function getBlogData() {
        try {
            console.log(`getting data from /get-blogs-json`);
            // Perform the fetch request
            const response = await fetch('/get-blogs-json');
            // Check if the response is ok (status 200-299)
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            // Parse the JSON data
            var responseData = await response.json();

            // blogsList = responseData.data;
            blogsList = responseData.data.blogs;

            // console.log(JSON.stringify(blogsList));
            isDataFetched = true;
            setTimeout(triggerBlogsDataFetched,2000);
            console.log('Blog data fetched successfully:');
            

        } catch (err) {
            console.log(`>> error while getting blogs data -- ${err}`);
            document.getElementById("blogs-parent-div").innerHTML = '<p style="color: black;background-color: #ddffdd;">Sorry, the server is not responding. Please try again later.</p>';
        }
    }

    function titleCaseText(text) {
                return text.toLowerCase().split(' ').map(function(word) {
                    return word.charAt(0).toUpperCase() + word.slice(1);
                }).join(' ');
    }

    function renderBlogDiv() {
        try {
            if (isDataFetched) {
                // 
                console.log(`>> blog data is now available`);
                console.log(`> total items : ${blogsList.length}`);
                console.log(`> sample : \n\n\n`);
                console.log(blogsList[0]);

                // Get the parent div where blog posts will be appended
                const blogsParentDiv = document.getElementById("blogs-parent-div");
                blogsParentDiv.innerHTML = ''; // Clear previous content if any
                
                // Loop over items of blogsList to create div blocks
                blogsList.forEach(post => {
                    // Create a new div element for each blog post
                    const blogPostDiv = document.createElement('div');
                    blogPostDiv.className = 'blog-post';
                    blogPostDiv.id = `blog-post-${post.blogID}`;
                    var postTitle = titleCaseText(post.title);
                    var author = post.user.firstName+post.user.lastName;
                    var userId = post.user.userID;

                    // Construct inner HTML for the blog post
                    blogPostDiv.innerHTML = `
                        <h2>${postTitle}</h2>
                        <p>
                            <a href="/profile/${userId}"><strong>${author}</strong></a> posted on ${new Date(post.createdAt).toLocaleDateString()}
                        </p>
                        <hr>
                        <p>
                            ${post.content+ '...'}
                            <a href="/blog?id=${post.blogID}">read more</a>
                        </p>
                    `;

                    // Append the blog post div to the parent div
                    blogsParentDiv.appendChild(blogPostDiv);
                });
            } else {
                console.log(`>> no blog data available | keep showing skeleton loading`);
            }
        } catch (err2) {
            console.log(`.. error while rendering blocks: ${err2}`);
        }
    }


    document.addEventListener('DOMContentLoaded', () => {
        // Call getBlogData when the DOM content is fully loaded
        getBlogData();

    });

    document.addEventListener('DOMContentLoaded', () => {
    const logoutButton = document.getElementById('user-logout-btn');
    
    if (logoutButton) {
        logoutButton.addEventListener('click', (event) => {
            event.preventDefault(); // Prevent default action
            
            fetch('/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                credentials: 'same-origin' // Ensure cookies/session are sent with the request
            })
            .then(response => {
                if (response.ok) {
                    window.location.href = '/login'; // Redirect to login page
                } else {
                    return response.text().then(text => {
                        console.error('Logout failed:', text);
                        alert('Logout failed. Please try again.');
                    });
                }
            })
            .catch(error => {
                console.error('Error during logout:', error);
                alert('An error occurred. Please try again.');
            });
        });
    }});

</script>

</html>